(()=>{const t=document.getElementById("chessboard");for(let e=0;e<64;e++){const s=document.createElement("div");s.classList.add((Math.floor(e/8)+e)%2==0?"white":"black"),s.addEventListener("click",(()=>{const c=e%8,i=Math.floor(e/8);if(o){n=[c,i];const e=l(o,n);for(const t of document.querySelectorAll(".highlight"))t.classList.remove("highlight");if(e)for(const[o,n]of e){const l=8*n+o;t.children[l].classList.add("highlight")}o=null,n=null}else o=[c,i],s.textContent="â™ž"})),t.appendChild(s)}let o=null,n=null;const l=(t,o)=>{const n=[[-2,-1],[-2,1],[2,-1],[2,1],[-1,-2],[-1,2],[1,-2],[1,2]],l=([t,o])=>t>=0&&t<8&&o>=0&&o<8,e=[[t]],s=new Set([t.toString()]);for(;e.length>0;){const t=e.shift(),c=t[t.length-1];if(c.toString()===o.toString())return t;for(const o of n){const n=[c[0]+o[0],c[1]+o[1]];l(n)&&!s.has(n.toString())&&(e.push([...t,n]),s.add(n.toString()))}}return null};console.log(l([0,0],[3,3])),console.log(l([0,0],[7,7])),console.log(l([0,0],[8,8]))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiTUFHQSxNQUFNQSxFQUFhQyxTQUFTQyxlQUFlLGNBRzNDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FDM0IsTUFBTUMsRUFBU0gsU0FBU0ksY0FBYyxPQUd0Q0QsRUFBT0UsVUFBVUMsS0FBS0MsS0FBS0MsTUFBTU4sRUFBSSxHQUFLQSxHQUFLLEdBQU0sRUFBSSxRQUFVLFNBR25FQyxFQUFPTSxpQkFBaUIsU0FBUyxLQUUvQixNQUFNQyxFQUFJUixFQUFJLEVBQ1JTLEVBQUlKLEtBQUtDLE1BQU1OLEVBQUksR0FHekIsR0FBS1UsRUFLQSxDQUNIQyxFQUFlLENBQUNILEVBQUdDLEdBQ25CLE1BQU1HLEVBQU9DLEVBQVlILEVBQWFDLEdBRXRDLElBQUssTUFBTVYsS0FBVUgsU0FBU2dCLGlCQUFpQixjQUM3Q2IsRUFBT0UsVUFBVVksT0FBTyxhQUcxQixHQUFJSCxFQUNGLElBQUssTUFBT0osRUFBR0MsS0FBTUcsRUFBTSxDQUN6QixNQUFNSSxFQUFrQixFQUFKUCxFQUFRRCxFQUM1QlgsRUFBV29CLFNBQVNELEdBQWFiLFVBQVVDLElBQUksWUFDakQsQ0FHRk0sRUFBYyxLQUNkQyxFQUFlLElBQ2pCLE1BckJFRCxFQUFjLENBQUNGLEVBQUdDLEdBQ2xCUixFQUFPaUIsWUFBYyxHQW9CdkIsSUFJRnJCLEVBQVdzQixZQUFZbEIsRUFDekIsQ0FHQSxJQUFJUyxFQUFjLEtBQ2RDLEVBQWUsS0FFbkIsTUFBTUUsRUFBYyxDQUFDTyxFQUFPQyxLQUUxQixNQUFNQyxFQUFRLENBQ1osRUFBRSxHQUFJLEdBQ04sRUFBRSxFQUFHLEdBQ0wsQ0FBQyxHQUFJLEdBQ0wsQ0FBQyxFQUFHLEdBQ0osRUFBRSxHQUFJLEdBQ04sRUFBRSxFQUFHLEdBQ0wsQ0FBQyxHQUFJLEdBQ0wsQ0FBQyxFQUFHLElBSUFDLEVBQWlCLEVBQUVmLEVBQUdDLEtBQU9ELEdBQUssR0FBS0EsRUFBSSxHQUFLQyxHQUFLLEdBQUtBLEVBQUksRUFHOURlLEVBQVEsQ0FBQyxDQUFDSixJQUdWSyxFQUFVLElBQUlDLElBQUksQ0FBQ04sRUFBTU8sYUFHL0IsS0FBT0gsRUFBTUksT0FBUyxHQUFHLENBRXZCLE1BQU1oQixFQUFPWSxFQUFNSyxRQUNiNUIsRUFBU1csRUFBS0EsRUFBS2dCLE9BQVMsR0FHbEMsR0FBSTNCLEVBQU8wQixhQUFlTixFQUFPTSxXQUMvQixPQUFPZixFQUlULElBQUssTUFBTWtCLEtBQVFSLEVBQU8sQ0FDeEIsTUFBTVMsRUFBYSxDQUFDOUIsRUFBTyxHQUFLNkIsRUFBSyxHQUFJN0IsRUFBTyxHQUFLNkIsRUFBSyxJQUd0RFAsRUFBZVEsS0FBZ0JOLEVBQVFPLElBQUlELEVBQVdKLGNBRXhESCxFQUFNUyxLQUFLLElBQUlyQixFQUFNbUIsSUFDckJOLEVBQVFyQixJQUFJMkIsRUFBV0osWUFFM0IsQ0FDRixDQUdBLE9BQU8sSUFBSSxFQU1iTyxRQUFRQyxJQUFJdEIsRUFBWSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsS0FDcENxQixRQUFRQyxJQUFJdEIsRUFBWSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsS0FDcENxQixRQUFRQyxJQUFJdEIsRUFBWSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2tuaWdodHMtdHJhdmFpbHMvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQga25pZ2h0TW92ZXMgZnJvbSAnLi9rbmlnaHRNb3Zlcy5qcyc7XG5cbi8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hlc3Nib2FyZCBlbGVtZW50XG5jb25zdCBjaGVzc2JvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGVzc2JvYXJkXCIpO1xuXG4vLyBMb29wIHRocm91Z2ggZWFjaCBzcXVhcmUgb24gdGhlIGNoZXNzYm9hcmQgYW5kIGNyZWF0ZSBhIGRpdiBlbGVtZW50IGZvciBpdFxuZm9yIChsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgLy8gU2V0IHRoZSBjbGFzcyBvZiB0aGUgc3F1YXJlIHRvIGVpdGhlciAnd2hpdGUnIG9yICdibGFjaycgYmFzZWQgb24gaXRzIHBvc2l0aW9uIG9uIHRoZSBjaGVzc2JvYXJkXG4gIHNxdWFyZS5jbGFzc0xpc3QuYWRkKChNYXRoLmZsb29yKGkgLyA4KSArIGkpICUgMiA9PT0gMCA/IFwid2hpdGVcIiA6IFwiYmxhY2tcIik7XG5cbiAgLy8gQWRkIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgc3F1YXJlXG4gIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIC8vIEdldCB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyBvZiB0aGUgY2xpY2tlZCBzcXVhcmVcbiAgICBjb25zdCB4ID0gaSAlIDg7XG4gICAgY29uc3QgeSA9IE1hdGguZmxvb3IoaSAvIDgpO1xuXG4gICAgLy8gSWYgdGhlIHN0YXJ0IHNxdWFyZSBpcyBub3QgeWV0IHNldCwgc2V0IGl0IGFuZCBwb3B1bGF0ZSB0aGUgc3F1YXJlIHdpdGggYSBrbmlnaHQgc3ltYm9sXG4gICAgaWYgKCFzdGFydFNxdWFyZSkge1xuICAgICAgc3RhcnRTcXVhcmUgPSBbeCwgeV07XG4gICAgICBzcXVhcmUudGV4dENvbnRlbnQgPSBcIuKZnlwiO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgc3RhcnQgc3F1YXJlIGlzIGFscmVhZHkgc2V0LCBzZXQgdGhlIHRhcmdldCBzcXVhcmUgYW5kIGNhbGwgdGhlIGtuaWdodE1vdmVzIGZ1bmN0aW9uXG4gICAgZWxzZSB7XG4gICAgICB0YXJnZXRTcXVhcmUgPSBbeCwgeV07XG4gICAgICBjb25zdCBwYXRoID0ga25pZ2h0TW92ZXMoc3RhcnRTcXVhcmUsIHRhcmdldFNxdWFyZSk7XG4gICAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBzcXVhcmUgb24gdGhlIGNoZXNzYm9hcmQgYW5kIHJlbW92ZSBhbnkgZXhpc3RpbmcgaGlnaGxpZ2h0XG4gICAgICBmb3IgKGNvbnN0IHNxdWFyZSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmhpZ2hsaWdodFwiKSkge1xuICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LnJlbW92ZShcImhpZ2hsaWdodFwiKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIGEgcGF0aCBpcyBmb3VuZCwgaGlnaGxpZ2h0IGVhY2ggc3F1YXJlIGluIHRoZSBwYXRoXG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICBmb3IgKGNvbnN0IFt4LCB5XSBvZiBwYXRoKSB7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlSW5kZXggPSB5ICogOCArIHg7XG4gICAgICAgICAgY2hlc3Nib2FyZC5jaGlsZHJlbltzcXVhcmVJbmRleF0uY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUmVzZXQgdGhlIHN0YXJ0IHNxdWFyZSBhbmQgdGFyZ2V0IHNxdWFyZSB2YXJpYWJsZXNcbiAgICAgIHN0YXJ0U3F1YXJlID0gbnVsbDtcbiAgICAgIHRhcmdldFNxdWFyZSA9IG51bGw7XG4gICAgfVxuICB9KTtcblxuICAvLyBBZGQgdGhlIHNxdWFyZSB0byB0aGUgY2hlc3Nib2FyZFxuICBjaGVzc2JvYXJkLmFwcGVuZENoaWxkKHNxdWFyZSk7XG59XG5cbi8vIERlZmluZSB2YXJpYWJsZXMgdG8ga2VlcCB0cmFjayBvZiB0aGUgc3RhcnQgYW5kIHRhcmdldCBzcXVhcmVzXG5sZXQgc3RhcnRTcXVhcmUgPSBudWxsO1xubGV0IHRhcmdldFNxdWFyZSA9IG51bGw7XG5cbmNvbnN0IGtuaWdodE1vdmVzID0gKHN0YXJ0LCB0YXJnZXQpID0+IHtcbiAgLy8gRGVmaW5lIHRoZSBwb3NzaWJsZSBtb3ZlcyBmb3IgYSBrbmlnaHRcbiAgY29uc3QgbW92ZXMgPSBbXG4gICAgWy0yLCAtMV0sXG4gICAgWy0yLCAxXSxcbiAgICBbMiwgLTFdLFxuICAgIFsyLCAxXSxcbiAgICBbLTEsIC0yXSxcbiAgICBbLTEsIDJdLFxuICAgIFsxLCAtMl0sXG4gICAgWzEsIDJdLFxuICBdO1xuXG4gIC8vIERlZmluZSBhIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgc3F1YXJlIGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBjaGVzc2JvYXJkXG4gIGNvbnN0IGlzV2l0aGluQm91bmRzID0gKFt4LCB5XSkgPT4geCA+PSAwICYmIHggPCA4ICYmIHkgPj0gMCAmJiB5IDwgODtcblxuICAvLyBEZWZpbmUgYSBxdWV1ZSB0byBrZWVwIHRyYWNrIG9mIHRoZSBzcXVhcmVzIHRvIHZpc2l0XG4gIGNvbnN0IHF1ZXVlID0gW1tzdGFydF1dO1xuXG4gIC8vIERlZmluZSBhIHNldCB0byBrZWVwIHRyYWNrIG9mIHRoZSBzcXVhcmVzIHdlIGhhdmUgYWxyZWFkeSB2aXNpdGVkXG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KFtzdGFydC50b1N0cmluZygpXSk7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBxdWV1ZSB1bnRpbCB3ZSBmaW5kIHRoZSB0YXJnZXQgc3F1YXJlXG4gIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IHNxdWFyZSB0byB2aXNpdCBmcm9tIHRoZSBxdWV1ZVxuICAgIGNvbnN0IHBhdGggPSBxdWV1ZS5zaGlmdCgpO1xuICAgIGNvbnN0IHNxdWFyZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcblxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgcmVhY2hlZCB0aGUgdGFyZ2V0IHNxdWFyZVxuICAgIGlmIChzcXVhcmUudG9TdHJpbmcoKSA9PT0gdGFyZ2V0LnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIHRoZSBuZXh0IHBvc3NpYmxlIG1vdmVzIGZyb20gdGhlIGN1cnJlbnQgc3F1YXJlXG4gICAgZm9yIChjb25zdCBtb3ZlIG9mIG1vdmVzKSB7XG4gICAgICBjb25zdCBuZXh0U3F1YXJlID0gW3NxdWFyZVswXSArIG1vdmVbMF0sIHNxdWFyZVsxXSArIG1vdmVbMV1dO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgbmV4dCBzcXVhcmUgaXMgd2l0aGluIGJvdW5kcyBhbmQgaGFzbid0IGFscmVhZHkgYmVlbiB2aXNpdGVkXG4gICAgICBpZiAoaXNXaXRoaW5Cb3VuZHMobmV4dFNxdWFyZSkgJiYgIXZpc2l0ZWQuaGFzKG5leHRTcXVhcmUudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBuZXh0IHNxdWFyZSB0byB0aGUgcXVldWUgYW5kIG1hcmsgaXQgYXMgdmlzaXRlZFxuICAgICAgICBxdWV1ZS5wdXNoKFsuLi5wYXRoLCBuZXh0U3F1YXJlXSk7XG4gICAgICAgIHZpc2l0ZWQuYWRkKG5leHRTcXVhcmUudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZGlkbid0IGZpbmQgdGhlIHRhcmdldCBzcXVhcmUsIHJldHVybiBudWxsXG4gIHJldHVybiBudWxsO1xufTtcblxuLy8gZXhwb3J0IGRlZmF1bHQga25pZ2h0TW92ZXM7XG5cbi8vIFRlc3QgdGhlIGZ1bmN0aW9uIHdpdGggc29tZSBleGFtcGxlIGlucHV0c1xuY29uc29sZS5sb2coa25pZ2h0TW92ZXMoWzAsIDBdLCBbMywgM10pKTsgLy8gRXhwZWN0ZWQgb3V0cHV0OiBbWzAsIDBdLCBbMSwgMl0sIFszLCAzXV1cbmNvbnNvbGUubG9nKGtuaWdodE1vdmVzKFswLCAwXSwgWzcsIDddKSk7IC8vIEV4cGVjdGVkIG91dHB1dDogW1swLCAwXSwgWzEsIDJdLCBbMCwgNF0sIFsxLCA2XSwgWzIsIDRdLCBbNCwgNV0sIFs2LCA2XSwgWzcsIDddXVxuY29uc29sZS5sb2coa25pZ2h0TW92ZXMoWzAsIDBdLCBbOCwgOF0pKTsgLy8gRXhwZWN0ZWQgb3V0cHV0OiBudWxsXG4iXSwibmFtZXMiOlsiY2hlc3Nib2FyZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpIiwic3F1YXJlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsIk1hdGgiLCJmbG9vciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ4IiwieSIsInN0YXJ0U3F1YXJlIiwidGFyZ2V0U3F1YXJlIiwicGF0aCIsImtuaWdodE1vdmVzIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZSIsInNxdWFyZUluZGV4IiwiY2hpbGRyZW4iLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwic3RhcnQiLCJ0YXJnZXQiLCJtb3ZlcyIsImlzV2l0aGluQm91bmRzIiwicXVldWUiLCJ2aXNpdGVkIiwiU2V0IiwidG9TdHJpbmciLCJsZW5ndGgiLCJzaGlmdCIsIm1vdmUiLCJuZXh0U3F1YXJlIiwiaGFzIiwicHVzaCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9