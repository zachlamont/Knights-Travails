(()=>{const t=document.getElementById("chessboard"),e=document.createElement("div");e.classList.add("knightIcon"),t.appendChild(e);for(let i=0;i<64;i++){const d=document.createElement("div");d.classList.add((Math.floor(i/8)+i)%2==0?"white":"black"),d.addEventListener("click",(()=>{const g=i%8,h=Math.floor(i/8);if(console.log("you clicked on square"+g+"and"+h),o){n=[g,h];const e=l(o,n);if(e&&e.length>0){for(const[o,n]of e){const e=8*n+o+1;t.children[e].classList.add("highlight")}c(e)}o=null,n=null}else{for(const t of document.querySelectorAll(".highlight"))t.classList.remove("highlight");o=[g,h],d.textContent="",e.style.display="block",s(d)}})),t.appendChild(d)}let o=null,n=null;const l=(t,e)=>{const o=[[-2,-1],[-2,1],[2,-1],[2,1],[-1,-2],[-1,2],[1,-2],[1,2]],n=[],l=([t,e])=>t>=0&&t<8&&e>=0&&e<8,s=[[t]],c=new Set([t.toString()]);for(;s.length>0;){const t=s.shift(),i=t[t.length-1];if(i.toString()===e.toString()){for(const e of t)n.push(e);break}for(const e of o){const o=[i[0]+e[0],i[1]+e[1]];l(o)&&!c.has(o.toString())&&(s.push([...t,o]),c.add(o.toString()))}}return n},s=o=>{const n=o.getBoundingClientRect(),l=n.left-t.getBoundingClientRect().left,s=n.top-t.getBoundingClientRect().top;e.style.left=l+"px",e.style.top=s+"px"},c=e=>{let o=0;const n=()=>{const l=e[o];s(t.children[8*l[1]+l[0]+1]),o++,o<e.length&&setTimeout(n,500)};n()};console.log(l([0,0],[3,3])),console.log(l([0,0],[7,7])),console.log(l([0,0],[8,8]))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,