//import knightMoves from './knightMoves.js';

// Get a reference to the chessboard element
const chessboard = document.getElementById("chessboard");

// Create a div element for the knight icon
const knightIcon = document.createElement("div");
knightIcon.classList.add("knightIcon");
chessboard.appendChild(knightIcon);

// Loop through each square on the chessboard and create a div element for it
for (let i = 0; i < 64; i++) {
  const square = document.createElement("div");

  // Set the class of the square to either 'white' or 'black' based on its position on the chessboard
  square.classList.add((Math.floor(i / 8) + i) % 2 === 0 ? "white" : "black");

  // Add an event listener for when the user clicks on the square
  square.addEventListener("click", () => {
    // Get the x and y coordinates of the clicked square
    const x = i % 8;
    const y = Math.floor(i / 8);

    // If the start square is not yet set, set it and populate the square with a knight symbol
    if (!startSquare) {
      startSquare = [x, y];
      square.textContent = "";
      knightIcon.style.display = "block";
      moveKnightToSquare(square);
    }
    // If the start square is already set, set the target square and call the knightMoves function
    else {
      targetSquare = [x, y];

      // calculate position of clicked square with respect to the chessboard
      const rect = square.getBoundingClientRect();
      const left = rect.left - chessboard.getBoundingClientRect().left;
      const top = rect.top - chessboard.getBoundingClientRect().top;

      // update position of knight icon to the clicked square using the calculated position
      knightIcon.style.left = left + "px";
      knightIcon.style.top = top + "px";

      const path = knightMoves(startSquare, targetSquare);
      // Loop through each square on the chessboard and remove any existing highlight
      for (const square of document.querySelectorAll(".highlight")) {
        square.classList.remove("highlight");
      }
      // If a path is found, highlight each square in the path
      if (path) {
        for (const [x, y] of path) {
          const squareIndex = y * 8 + x;
          chessboard.children[squareIndex].classList.add("highlight");

          // Animate the knight moving to each square in the path
          const animate = () => {
            // If we've reached the end of the path, stop the animation
            if (currentSquareIndex >= path.length) {
              clearInterval(animationId);
              return;
            }
            // Move the knight to the current square in the path
            const [x, y] = path[currentSquareIndex];
            moveKnightToSquare(chessboard.children[y * 8 + x]);

            // Increment the current square index
            currentSquareIndex++;
          };
        }
        animateKnightMoves(path);
      }
      // Reset the start square and target square variables
      startSquare = null;
      targetSquare = null;
    }
  });

  // Add the square to the chessboard
  chessboard.appendChild(square);
}

// Define variables to keep track of the start and target squares
let startSquare = null;
let targetSquare = null;

const knightMoves = (start, target) => {
  // Define the possible moves for a knight
  const moves = [
    [-2, -1],
    [-2, 1],
    [2, -1],
    [2, 1],
    [-1, -2],
    [-1, 2],
    [1, -2],
    [1, 2],
  ];

  // Define an array to store the squares in the path
  const path = [];

  // Define a function to check if a square is within the bounds of the chessboard
  const isWithinBounds = ([x, y]) => x >= 0 && x < 8 && y >= 0 && y < 8;

  // Define a queue to keep track of the squares to visit
  const queue = [[start]];

  // Define a set to keep track of the squares we have already visited
  const visited = new Set([start.toString()]);

  // Loop through the queue until we find the target square
  while (queue.length > 0) {
    // Get the next square to visit from the queue
    const currentPath = queue.shift();
    const currentSquare = currentPath[currentPath.length - 1];

    // Check if we have reached the target square
    if (currentSquare.toString() === target.toString()) {
      for (const square of currentPath) {
        path.push(square);
      }
      break;
    }

    // Generate the next possible moves from the current square
    for (const move of moves) {
      const nextSquare = [
        currentSquare[0] + move[0],
        currentSquare[1] + move[1],
      ];

      // Check if the next square is within bounds and hasn't already been visited
      if (isWithinBounds(nextSquare) && !visited.has(nextSquare.toString())) {
        // Add the next square to the queue and mark it as visited
        queue.push([...currentPath, nextSquare]);
        visited.add(nextSquare.toString());
      }
    }
  }

  // If we didn't find the target square, return null
  //return null;

  return path;
};

// Define a function to move the knight icon to a square on the chessboard
const moveKnightToSquare = (square) => {
  // Calculate the position of the square with respect to the chessboard
  const rect = square.getBoundingClientRect();
  const left = rect.left - chessboard.getBoundingClientRect().left;
  const top = rect.top - chessboard.getBoundingClientRect().top;

  // Update the position of the knight icon to the square
  knightIcon.style.left = left + "px";
  knightIcon.style.top = top + "px";
};

// Define a function to animate the knight moving to each square in the path
const animateKnightMoves = (path) => {
  // Move the knight to the start square
  moveKnightToSquare(chessboard.children[startSquare[1] * 8 + startSquare[0]]);

  // Define a variable to keep track of the current square in the path
  let currentSquareIndex = 0;

  // Define a function to move the knight to the next square in the path
  const moveKnightToNextSquare = () => {
    // Get the next square in the path
    const nextSquare = path[currentSquareIndex];

    // Move the knight to the next square
    moveKnightToSquare(chessboard.children[nextSquare[1] * 8 + nextSquare[0]]);

    // Increment the current square index
    currentSquareIndex++;

    // If there are more squares in the path, schedule the next move
    if (currentSquareIndex < path.length) {
      setTimeout(moveKnightToNextSquare, 500);
    }
  };

  // Schedule the first move
  moveKnightToNextSquare();
};

// Test the function with some example inputs
console.log(knightMoves([0, 0], [3, 3])); // Expected output: [[0, 0], [1, 2], [3, 3]]
console.log(knightMoves([0, 0], [7, 7])); // Expected output: [[0, 0], [1, 2], [0, 4], [1, 6], [2, 4], [4, 5], [6, 6], [7, 7]]
console.log(knightMoves([0, 0], [8, 8])); // Expected output: null
